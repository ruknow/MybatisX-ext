<idea-plugin url="https://gitee.com/baomidou/mybatis-plus" require-restart="false" allow-bundled-update="true">
    <id>com.baomidou.plugin.idea.mybatisx</id>
    <name>MyBatisX</name>
    <vendor email="jobob@qq.com" url="https://gitee.com/baomidou/MybatisX">MybatisX</vendor>

    <description><![CDATA[
          MybatisX plugin
          Features:
       <ul>
          <li>mapper and xml can jump back and forth</li>
          <li>mybatis.xml,mapper.xml prompt</li>
          <li>mapper and xml support auto prompt like jpa (reference  MybatisCodeHelperPro)</li>
          <li>integrate mybatis generator Gui (copy from free mybatis plugin)</li>
      </ul>
      ]]>
    </description>

    <change-notes><![CDATA[
      <h4>1.6.15</h4>
      <ul>
         <li>20240919</li>
         <li>升级2024.2，同步 github 20240808</li>
      </ul>
      <h4>1.6.14</h4>
      <ul>
         <li>20240830</li>
         <li>升级2024.2</li>
      </ul>
      <h4>1.6.13</h4>
      <ul>
         <li>20240415</li>
         <li>升级ActionUpdateThread.OLD_EDT</li>
      </ul>
      <h4>1.6.12</h4>
      <ul>
         <li>20240409</li>
         <li>升级支持2024.1。</li>
      </ul>
      <h4>1.6.11</h4>
      <ul>
         <li>20240201</li>
         <li>MySQL中JSON对应的JdbcType.OTHER类型，自动映射成ObjectNode或ArrayNode（字段注释中包含‘数组’时）字段类型。</li>
      </ul>
      <h4>1.6.10</h4>
      <ul>
         <li>20240127</li>
         <li>实体对象增加超级基类设置，在不包含一般基类所有字段时继承超级基类。</li>
         <li>重新生成代码时，只会覆盖实体对象的基类，实体扩展类和其他类不会覆盖。</li>
      </ul>
      <h4>1.6.9</h4>
      <ul>
         <li>20240100</li>
         <li>扩展自原仓库版本日期：2024/1/18</li>
      </ul>
      ]]>
    </change-notes>

    <idea-version since-build="241"/>
    <depends>com.intellij.modules.java</depends>
    <depends optional="true" config-file="database.xml">com.intellij.database</depends>
    <!-- support aliases -->
    <depends optional="true" config-file="spring.xml">com.intellij.spring</depends>
    <!-- support aliases -->
    <depends optional="true" config-file="spring-boot.xml">com.intellij.spring.boot</depends>
    <depends optional="true" config-file="withKotlin.xml">org.jetbrains.kotlin</depends>
    <depends optional="true" config-file="injection-mybatisx.xml">org.intellij.intelliLang</depends>

    <extensions defaultExtensionNs="com.intellij">
        <projectService id="baomidou.TemplatesSettings"
                        serviceImplementation="com.baomidou.plugin.idea.mybatisx.generate.setting.TemplatesSettings"/>
        <!--文件描述-->
        <!-- mapper.xml文件属性提示 -->
        <dom.fileMetaData id="baomidou.MapperDescription" rootTagName="mapper"
                          implementation="com.baomidou.plugin.idea.mybatisx.dom.description.MapperDescription"/>
        <!-- mybatis配置文件属性提示 -->
        <dom.fileMetaData id="baomidou.ConfigurationDescription"  rootTagName="configuration"
                          implementation="com.baomidou.plugin.idea.mybatisx.dom.description.ConfigurationDescription"/>

        <!-- Ctrl+B, 定位类的跳转, 定位方法的跳转 -->
        <definitionsScopedSearch id="baomidou.MapperClassSearch"
                                 implementation="com.baomidou.plugin.idea.mybatisx.system.definitionsearch.MapperClassSearch"/>
        <!-- 与搜索配套的跳转 -->
        <gotoTargetRendererProvider order="first" implementation="com.baomidou.plugin.idea.mybatisx.provider.GotoMapperXmlSchemaTypeRendererProvider"/>

        <!--项目服务-->
        <projectService id="baomidou.JavaService" serviceImplementation="com.baomidou.plugin.idea.mybatisx.service.JavaService"/>
        <projectService id="baomidou.AnnotationService" serviceImplementation="com.baomidou.plugin.idea.mybatisx.service.AnnotationService"/>
        <projectService id="baomidou.EditorService" serviceImplementation="com.baomidou.plugin.idea.mybatisx.service.EditorService"/>
        <projectService id="baomidou.AliasFacade" serviceImplementation="com.baomidou.plugin.idea.mybatisx.alias.AliasFacade"/>

        <projectService id="baomidou.MapperLocator" serviceImplementation="com.baomidou.plugin.idea.mybatisx.locator.MapperLocator"/>

        <!--代码行插件，实现代码导航功能-->
        <!-- java 跳转到 xml  -->
        <codeInsight.lineMarkerProvider id="baomidou.MapperLineMarkerProvider" language="JAVA"
                                        implementationClass="com.baomidou.plugin.idea.mybatisx.provider.MapperLineMarkerProvider"/>
        <!-- xml 跳转到 java -->
        <codeInsight.lineMarkerProvider id="baomidou.StatementLineMarkerProvider" language="XML"
                                        implementationClass="com.baomidou.plugin.idea.mybatisx.provider.StatementLineMarkerProvider"/>
        <!-- 在service层注入了mapper对象, 在这个对象进行跳转到 mapper 类-->
        <codeInsight.lineMarkerProvider id="baomidou.InjectionLineMarkerProvider" language="JAVA"
                                        implementationClass="com.baomidou.plugin.idea.mybatisx.provider.InjectionLineMarkerProvider"/>

        <!--设置中的配置-->
        <applicationConfigurable id="mybatisx.settings" displayName="MybatisX"
                                 instance="com.baomidou.plugin.idea.mybatisx.setting.MybatisConfigurable"/>

        <!-- xml 标签提示 -->
        <!-- 在mapper.xml内部, 进行智能提示, 例如: #{提示位置} -->
        <completion.contributor id="baomidou.SqlParamCompletionContributor" language="SQL"
                                implementationClass="com.baomidou.plugin.idea.mybatisx.system.contributor.SqlParamCompletionContributor"
                                order="first"/>

        <!-- jpa规范提示, 在mapper类声明方法提示, 提示字符串完成后, 后续可以根据字符串生成方法参数和XML内容 -->
        <completion.contributor id="baomidou.MapperMethodCompletionContributor" language="JAVA"
                                implementationClass="com.baomidou.plugin.idea.mybatisx.system.contributor.MapperMethodCompletionContributor"/>


        <!--文件模板组，新建文件选择模板, 这里只是定义一个模板, 在mapper类方法定义完成后, 可以根据这个空模板生成一个文件 -->
        <fileTemplateGroup id="baomidou.MybatisFileTemplateDescriptorFactory"
                           implementation="com.baomidou.plugin.idea.mybatisx.system.template.MybatisFileTemplateDescriptorFactory"/>

        <!--附加的LiveTemplate模板-->
        <defaultLiveTemplates id="baomidou.SqlLiveTemplateProvider"
                              file="liveTemplates/sql"/>

        <!-- Mapper类 重命名 -->
        <refactoring.elementListenerProvider id="baomidou.MapperRefactoringProvider"
                                             implementation="com.baomidou.plugin.idea.mybatisx.system.refactoring.MapperRefactoringProvider"/>

        <!-- 语法校验，让没有生成代码的方法产生错误 -->
        <localInspection language="JAVA" shortName="MybatisXMapperMethodInspection"
                         id="baomidou.MybatisMapperMethodInspection"
                         displayName="Mapper method inspection"
                         groupName="Mybatis" enabledByDefault="true" level="ERROR"
                         implementationClass="com.baomidou.plugin.idea.mybatisx.inspection.MapperMethodInspection"/>

        <localInspection language="XML" shortName="MybatisXMapperXmlInspection"
                         enabledByDefault="true"
                         level="ERROR"
                         id="baomidou.MybatisMapperXmlInspection"
                         displayName="Mapper xml inspection"
                         groupName="Mybatis"
                         hasStaticDescription="true"
                         implementationClass="com.baomidou.plugin.idea.mybatisx.inspection.MapperXmlInspection"/>

        <!--提示动作 start-->
        <!-- 生成参数注解 @Param -->
        <intentionAction id="baomidou.GenerateParamAnnotationIntention">
            <language>JAVA</language>
            <className>com.baomidou.plugin.idea.mybatisx.intention.GenerateParamAnnotationIntention</className>
        </intentionAction>

        <!-- 通过方法名生成对应的 查询语句 -->
        <intentionAction id="baomidou.GenerateStatementIntention">
            <language>JAVA</language>
            <className>com.baomidou.plugin.idea.mybatisx.intention.GenerateStatementIntention</className>
        </intentionAction>

        <!-- 生成mybatis mapper.xml文件 -->
        <intentionAction order="first" id="baomidou.GenerateMapperIntention">
            <language>JAVA</language>
            <className>com.baomidou.plugin.idea.mybatisx.intention.GenerateMapperIntention</className>
        </intentionAction>

        <!-- 根据jpa名字生成方法和xml文件内容 -->
        <intentionAction id="baomidou.GenerateMapperMethodSmartJpaAction">
            <language>JAVA</language>
            <className>com.baomidou.plugin.idea.mybatisx.smartjpa.GenerateSmartJpaAction</className>
        </intentionAction>

        <intentionAction id="baomidou.GenerateMapperMethodSmartAdvanceJpaAction">
            <language>JAVA</language>
            <className>com.baomidou.plugin.idea.mybatisx.smartjpa.GenerateSmartJpaAdvanceAction</className>
        </intentionAction>
        <!--提示动作 end-->

        <!-- mybatis的xml和mapper类 文件图标都改成一只鸟-->
        <iconProvider id="baomidou.XmlAndMapperIconProvider"
                      implementation="com.baomidou.plugin.idea.mybatisx.provider.XmlAndMapperIconProvider"/>


        <!-- mapper.xml文件 #{} 区域的引用跳转 -->
        <psi.referenceContributor id="hashMarkerReferenceContributor" language="JAVA"
                                  implementation="com.baomidou.plugin.idea.mybatisx.reference.ContextHashMarkReferenceContributor"/>

        <!-- 应用服务, 必须放在主文件,否则 XmlAndMapperIconProvider 会加载不到-->
        <applicationService id="baomidou.MybatisSetting"
                            serviceImplementation="com.baomidou.plugin.idea.mybatisx.setting.MybatisXSettings"/>

        <!-- 使用 Alt+Delete 删除方法时, 也删掉对应的标签 -->
        <refactoring.safeDeleteProcessor id="MapperMethodSafeDeleteProcessor"
            implementation="com.baomidou.plugin.idea.mybatisx.system.refactoring.MapperMethodSafeDeleteProcessor"/>
    </extensions>

</idea-plugin>
